/* РЕАЛІЗАЦІЯ ФУНКЦІЙ ІЗ ЗАГОЛОВНОГО
 ФАЙЛУ. ОСНОВНА ФУНКЦІОНАЛЬНІСТЬ ПРОГРАМИ */


#include "basic.h"

// функція для розбиття текстового рядку на масив символів(в нашому випадку - цифр)
void splitThings(const QString &string1, const QString &string2, QStringList &text1, QStringList &text2)
{
    text1 = string1.split(" "); // власне розбиття тектового рядка
    text2 = string2.split(" ");
}


// функція для сортування. повертає true, якщо необхідно поміняти
// значення місцями, в іншому випадку - false.
// Аналог Disposition
bool sortingAlg(QString str1, QString str2)
{
    // приведення рядку символів до типу int і порівняння
    if (str1.toInt() < str2.toInt())
        return true;
    return false;
}


// Функція для виконання операції об'єднання множин.
QString Union(QStringList list1, QStringList list2)
{
    QString result = ""; // оголошення порожнього текстового рядка

    list1 << list2; // злиття двох масивів, які містять цифри
    list1.removeDuplicates(); // видалення дублікатів, за допомогою функції наявної в QT

    std::sort(list1.begin(),list1.end(), sortingAlg); // сортування на зростання

    // надання змінній значення другого масиву, при цьому, після кожного значення проставляється " "
    result = list1.join(" ");

    return result; // повернення результату
}


// функція для знаходження різниці двох множин (A/B)
QString DifferenceAB(QStringList list1, QStringList list2)
{
    // цикл, для перегляду кожного елемента list2(множина A або B)
    for (int i = 0; i < list2.length();i++)
    {
        // якщо в list1 є поточний елемент з list2
        if (list1.indexOf(list2[i]) != -1)
        {
            // видалення цього елемента
            // ПРИГАДАЙ ОПЕРАЦІЮ A/B !!!
            list1.removeAt(list1.indexOf(list2[i]));
        }
    }
    // повернення значення першого масиву, при цьому, після кожного значення проставляється " "
    // і устворюється не масив, а текствоий рядок
    return list1.join(" ");
}


// ПЕРЕТИН
QString Intersection(QStringList list1, QStringList list2)
{
    // перегляд кожного елемента з list1(множина А)
    for (int i = 0; i < list1.length();i++)
    {
        // якщо в множині B немає елемента з множини A
        if (list2.indexOf(list1[i]) == -1)
        {
            // видалення елемента з множини A
            list1.removeAt(i);
            // в множині А на 1 менше елемент, отже відбувся зсув
            // Отже, наприклад, якщо ми перевіряємо індекс 2 і видаляємо його
            // то елемент з індексом 3 матиме індекс (2).
            // аби його перевірити в наступній ітерації циклу,
            // зменшуємо значення змінної i на один.
            // після цього він збільшиться на один, а, отже, індекс не зміниться
            // і ми не пропустимо жодного елемента
            i--;
        }
    }
    if(list1.empty()){
        list1+="∅";
    }
    // повернення значення першого масиву, при цьому, після кожного значення проставляється " "
    // і устворюється не масив, а текствоий рядок
    return list1.join(" ");
}


// СИМЕТРИЧНА РІЗНИЦЯ
QString SymmetricDifference(QStringList list1, QStringList list2)
{
    // передивляємося кожен елемент
    for (int i = 0; i < list1.length();i++)
    {
        // якщо в множині B немає поточного елемента множини А
        if (list2.indexOf(list1[i]) != -1)
        {
            // видаляємо цей елемент з множини В
            list2.removeAt(list2.indexOf(list1[i]));
            // видаляємо цей елемент з множини А
            list1.removeAt(i);
            // в множині А на 1 менше елемент, отже відбувся зсув
            // Отже, наприклад, якщо ми перевіряємо індекс 2 і видаляємо його
            // то елемент з індексом 3 матиме індекс (2).
            // аби його перевірити в наступній ітерації циклу,
            // зменшуємо значення змінної i на один.
            // після цього він збільшиться на один, а, отже, індекс не зміниться
            // і ми не пропустимо жодного елемента
            i--;
        }
    }
    list1 << list2; // злиття двох масивів, які містять цифри

    std::sort(list1.begin(),list1.end(), sortingAlg); // сортування на зростання
    // повернення значення першого масиву, при цьому, після кожного значення проставляється " "
    // і устворюється не масив, а текствоий рядок
    return list1.join(" ");
}


bool AintoB(QStringList list1, QStringList list2)
{
    short counter = 0;
    for (short i = 0; i < list1.length();i++)
    {
        if (list2.indexOf(list1[i]) != -1)
        {
            counter++;continue;
        } else
            return false;
    }
    if (counter == list1.length())
        return true;
}


















